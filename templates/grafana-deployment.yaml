apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.grafana.replicas }}
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      imagePullSecrets:
        - name: harbor-regcred
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsGroup: 472
      containers:
        - name: grafana
          image: {{ printf "%s/%s:%s" .Values.imageRegistry .Values.grafana.image .Values.grafana.tag }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 20
          envFrom:
            - secretRef:
                name: grafana-secrets
          volumeMounts:
            - name: data
              mountPath: /var/lib/grafana
            - name: ini
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
              subPath: datasources.yaml
            - name: home-dashboard
              mountPath: /var/lib/grafana/dashboards/home.json
              subPath: home.json
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: grafana-data
        - name: ini
          configMap:
            name: grafana-ini
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: home-dashboard
          configMap:
            name: grafana-home-dashboard